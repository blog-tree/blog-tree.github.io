{"version":3,"sources":["components/Tools/Translate/Wrapper.js","components/Template/Navigation/Navigation.js","components/Template/Header/Header.js","components/Template/Footer/Footer.js","components/Pages/Main/Main.js","components/Template/Layout/Layout.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","local","navigator","language","indexOf","parts","split","shift","getLang","langName","Spanish","Russian","Ukrainian","English","lang","Wrapper","props","_useState","useState","_useState2","Object","slicedToArray","locale","setLocale","_useState3","_useState4","messages","setMessages","react_default","a","createElement","Provider","value","selectLanguage","newLocale","provider","children","Navigation","activeClass","state","setState","context","useContext","scrollHandler","window","scrollY","code","useEffect","addEventListener","removeEventListener","Navbar","collapseOnSelect","expand","fixed","className","concat","react_router_dom","to","Toggle","aria-controls","Collapse","id","Nav","NavDropdown","title","onSelect","Item","eventKey","Header","Template_Navigation_Navigation","Component","Footer","year","Date","getFullYear","message","defaultMessage","Main","Layout","Template_Header_Header","react_router","exact","path","component","Template_Footer_Footer","App","Template_Layout_Layout","Boolean","location","hostname","match","ReactDOM","render","Translate_Wrapper","components_App_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84ff434f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {IntlProvider} from 'react-intl';\nimport English from '../../../lang/en.json';\nimport Spanish from \"../../../lang/es.json\";\nimport Russian from \"../../../lang/ru.json\";\nimport Ukrainian from \"../../../lang/ua.json\";\n\nexport const Context = React.createContext({});\n\nlet local = navigator.language;\nif (local.indexOf('-') !== -1) {\n  const parts = local.split('-');\n  local = parts.shift();\n}\n\nconst getLang = (langName) => {\n  switch (langName) {\n    case 'es':\n      return Spanish;\n    case 'ru':\n      return Russian;\n    case 'ua':\n      return Ukrainian;\n    default: return English;\n  }\n}\n\nconst lang = getLang(local);\n\nconst Wrapper = (props) => {\n  const [locale, setLocale] = useState(local);\n  const [messages, setMessages] = useState(lang);\n\n  function selectLanguage(newLocale) {\n    setLocale(newLocale);\n    setMessages(getLang(newLocale));\n  }\n\n  return (\n    <Context.Provider value = {{locale, selectLanguage}}>\n      <IntlProvider messages={messages} locale={locale}>\n        {props.children}\n      </IntlProvider>\n    </Context.Provider>\n  );\n}\n\nexport default Wrapper;\n","import React, {useContext, useEffect, useState} from 'react';\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css';\nimport {Context} from \"../../Tools/Translate/Wrapper\";\n\nconst Navigation = () => {\n  const [state, setState] = useState({ activeClass: 'top' });\n  const context = useContext(Context);\n  const scrollHandler = () => {\n    let activeClass = 'stick';\n    if (window.scrollY <= 30) {\n      activeClass = 'top';\n    }\n    setState({ activeClass });\n  };\n  const getLang = (code) => {\n    switch (code) {\n      case 'ru':\n        return 'Ру';\n      case 'ua':\n        return 'Укр';\n      case 'en':\n      case 'es':\n      default:\n        return code;\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', scrollHandler);\n    return () => {\n      window.removeEventListener('scroll', scrollHandler);\n    }\n  });\n\n  return (\n    <Navbar collapseOnSelect expand=\"lg\" fixed=\"top\" className={`mcnavbar ${state.activeClass}`}>\n      <Link to=\"/\">.Blog-Tree</Link>\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Nav className=\"mcnav\">\n          <NavDropdown title={getLang(context.locale)} id=\"nav-dropdown\" onSelect={context.selectLanguage}>\n            <NavDropdown.Item eventKey=\"en\">{getLang('en')}</NavDropdown.Item>\n            <NavDropdown.Item eventKey=\"es\">{getLang('es')}</NavDropdown.Item>\n            <NavDropdown.Item eventKey=\"ru\">{getLang('ru')}</NavDropdown.Item>\n            <NavDropdown.Item eventKey=\"ua\">{getLang('ua')}</NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\nimport Navigation from '../Navigation/Navigation'\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"header-container\">\n        <Navigation />\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport './Footer.css';\nimport {FormattedMessage} from \"react-intl\";\n\nclass Footer extends React.Component {\n  \n  render() {\n    const year = new Date().getFullYear();\n    return (\n      <Router>\n        <footer className=\"footer\">\n          <div className=\"container\">\n            <div className=\"line\" />\n              <div className=\"row\">\n                <div className=\"col-12 col-sm-6 col-lg-3\">\n                  <div className=\"block\">\n                    <h4 className=\"bolder title\"><FormattedMessage\n                      id = \"content.about\"\n                      defaultMessage=\"About\"\n                    /></h4>\n                    <Link to=\"license\"><FormattedMessage\n                      id = \"content.license\"\n                      defaultMessage=\"License\"\n                    /></Link>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row mt-4 text-muted\">\n                <div className=\"col-12\">\n                  <div className=\"text-muted mt-2\">© { year } zagovorichev.github.io</div>\n                </div>\n              </div>\n          </div>\n        </footer>\n      </Router>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport './Main.css';\n\nclass Main extends React.Component {\n  render() {\n    return (\n        <div className=\"main-component\">\n          <section\n            className={`section align-item-center`}\n          >\n            <div className=\"container\">\n              <div className=\"row align-item-center\">\n                <div className=\"col-12 col-md-6\">\n                  <h2>Test</h2>\n                </div>\n              </div>\n            </div>\n          </section>\n        </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\nimport Main from '../../Pages/Main/Main';\nimport './Layout.css';\n\nclass Layout extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header />\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default Layout;\n","import React from 'react';\nimport './App.css';\nimport Layout from '../Template/Layout/Layout'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport Wrapper from './components/Tools/Translate/Wrapper';\n\nReactDOM.render(\n  <Wrapper>\n    <App />\n  </Wrapper>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}